[{"title":"SpringBoot配置","url":"/2020/03/25/SpringBoot配置/","content":"\n##  SpringBoot学习之SpringBoot配置\n\n### 1.SpringBoot属性注入方式\n\n**目标**：能够使用@ConfigurationProperties实现SpringBoot配置文件配置项读取和应用\n\n**需求**：将配置文件中的配置项读取到一个对象中；\n\n**实现**：可以使用SpringBoot提供的注解@ConfigurationProperties，该注解可以将SpringBoot的配置文件（默认必须为application.properties或application.yml）中的配置项读取到一个对象中。\n\n实现步骤：\n\n1. 创建配置项类JdbcProperties类，在该类名上添加@ConfigurationProperties；\n2. 创建application.properties配置文件，并写入jdbc配置项；\n3. 将JdbcProperties对象注入到JdbcConfig；\n4. 测试\n\n**小结**：\n\n* 使用@ConfigurationProperties编写配置类将配置文件中的配置项设置到对象中\n\n  ```java\n  @ConfigurationProperties(prefix = \"jdbc\")\n  public class JdbcProperties {\n      private String url;\n      private String driverClassName;\n      private String username;\n      private String password;\n  \n      public String getUrl() {\n          return url;\n      }\n  \n      public void setUrl(String url) {\n          this.url = url;\n      }\n  \n      public String getDriverClassName() {\n          return driverClassName;\n      }\n  \n      public void setDriverClassName(String driverClassName) {\n          this.driverClassName = driverClassName;\n      }\n  \n      public String getUsername() {\n          return username;\n      }\n  \n      public void setUsername(String username) {\n          this.username = username;\n      }\n  \n      public String getPassword() {\n          return password;\n      }\n  \n      public void setPassword(String password) {\n          this.password = password;\n      }\n  }\n  ```\n\n* 使用@ConfigurationProperties在方法上使用\n\n  ```java\n  @Bean\n  @ConfigurationProperties(prefix = \"jdbc\")\n  public DataSource dataSource() {\n      return new DruidDataSource();\n  }\n  ```\n\n  \n\n## 2.yml文件配置\n\n**目标**：可以将多个yml文件在application.yml文件中配置激活\n\n**分析**：yaml与properties配置文件除了展示形式不相同以外，其他功能和作用都一样的；在项目中的原来的读取方式不需要改变。\n\nyml配置文件的特征：\n\n1. 树状层级结构展示配置项；\n2. 配置项之间如果有关系的话需要分两行空格；\n3. 配置项如果有值的话，那么需要在`:`之后空一格再写配置项值；\n\n1）将application.properties配置文件修改为application.yml的话；\n\n```yml\njdbc:\n\tdriverClassName: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/springboot_test\n\tusername: root\n\tpassword: root\n```\n\n2）多个yml配置文件在SpringBoot中是被允许的。这些配置文件的名称必须为application-***.yml，并且这些配置文件必须要在application.yml配置文件中激活之后才可以使用。\n\n```yml\nspring:\n\tprofiles: \n\t\tactive: abc     //abc即为application-abc.yml\n```\n\n3）如果properties和yml配置文件同时存在在SpringBoot项目中，那么这两类配置都有效。在两个配置文件中如果存在同名配置项的话会以properties文件的为主。","tags":["SpringBoot","SpringBoot配置"]},{"title":"SpringBoot学习","url":"/2020/03/25/SpringBoot学习/","content":"\n# SpringBoot 学习\n\n## 1.SpringBoot概述\n\n1. 关于SpringBoot\n\n   SpringBoot的设计目的是让项目尽可能快的启动和运行项目，而无需预先配置Spring。SpringBoot以一种固定的方式来构建可用于生产级别的应用程序。俗称：一个便捷搭建基于Spring工程的脚手架。\n\n2. 为什么要学习SpringBoot\n\n   解决Java复杂的配置和混乱的依赖管理。Springboot简化了基于Spring的应用开发。\n\n3. SpringBoot的特点\n\n   - 创建独立的Spring用用，为所有Spring的开发者提供一个非常快速的、广泛接受的入门体验。\n   - 直接嵌入应用服务器，如Tomcat、Jetty、Undertow等；不需要部署war包。\n   - 提供固定的启动器依赖去简化组件配置；实现开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），通过自己设置参数（.properties或.yml的配置文件），即可快速使用。\n   - 自动地配置Spring和其他有需要的第三方依赖。\n   - 提供了一些大型项目中常见的非功能性特效，如内嵌服务器、安全、指标、健康检测、外部化配置等。\n   - 绝对没有代码生成，也无需XML配置。\n\n## 2.SpringBoot入门\n\n1. 在pom.xml中添加基本依赖\n\n   ```xml\n   <!-- 副工程依赖 -->\n   <parent>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-parent</artifactId>\n           <version>2.1.5.RELEASE</version>\n   </parent>\n   \n   <dependencies>\n   \t\t<!-- SpringBoot的依赖 -->\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-web</artifactId>\n           </dependency>\n           <!-- JSON依赖-->\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-json</artifactId>\n           </dependency>\n           <!-- Tomcat依赖-->\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-tomcat</artifactId>\n           </dependency>\n           <!-- Hibernate Validator依赖-->\n           <dependency>\n               <groupId>org.hibernate.validator</groupId>\n               <artifactId>hibernate-validator</artifactId>\n           </dependency>\n           <!-- Spring Web依赖-->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-web</artifactId>\n               <version>5.1.7.RELEASE</version>\n           </dependency>\n           <!-- Spring Web MVC依赖-->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-webmvc</artifactId>\n               <version>5.1.7.RELEASE</version>\n           </dependency>\n   </dependencies>\n   ```\n\n   \n\n2. 通过注解@Component&@ComponentScan扫描装配 Bean\n\n   User.java:\n\n   ```java\n   package com.lin.demo;\n   \n   \n   import org.springframework.beans.factory.annotation.Value;\n   import org.springframework.stereotype.Component;\n   \n   //若不配置名称，默认为类开头小写\n   @Component(\"user\")\n   public class User {\n       @Value(\"1\")\n       private int id;\n       @Value(\"user_name_1\")\n       private String userName;\n       @Value(\"note1\")\n       private String note;\n       \n       /**  setter and getter  **/\n   }\n   ```\n\n   为了让Spring IoC 容器装配这个类，需要改造类AppConfig\n\n   AppConfig.java\n\n   ```java\n   package com.lin.demo;\n   \n   \n   import org.springframework.context.annotation.ComponentScan;\n   import org.springframework.context.annotation.Configuration;\n   \n   @Configuration\n   @ComponentScan\n   public class AppConfig {\n   }\n   ```\n\n3. 测试扫描\n\n   ```java\n   ApplicationContext ctx\n   \t= new AnnotationConfigApplicationContext(AppConfig.class);\n   User user = ctx.getBean(User.class);\n   ```\n\n## Java配置\n\n常用注解：\n\n* @Configuration：声明一个类作为配置类，代替xml文件\n* @Bean：声明在方法上，将方法的返回值加入Bean容器，代替<bean>标签\n* @Value：属性注入\n* @propertySource：指定外部属性文件","tags":["SpringBoot"]}]