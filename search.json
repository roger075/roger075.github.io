[{"title":"SpringBoot学习","url":"/2020/03/25/SpringBoot学习/","content":"\n# SpringBoot 学习\n\n## 1.SpringBoot概述\n\n1. 关于SpringBoot\n\n   SpringBoot的设计目的是让项目尽可能快的启动和运行项目，而无需预先配置Spring。SpringBoot以一种固定的方式来构建可用于生产级别的应用程序。俗称：一个便捷搭建基于Spring工程的脚手架。\n\n2. 为什么要学习SpringBoot\n\n   解决Java复杂的配置和混乱的依赖管理。Springboot简化了基于Spring的应用开发。\n\n3. SpringBoot的特点\n\n   - 创建独立的Spring用用，为所有Spring的开发者提供一个非常快速的、广泛接受的入门体验。\n   - 直接嵌入应用服务器，如Tomcat、Jetty、Undertow等；不需要部署war包。\n   - 提供固定的启动器依赖去简化组件配置；实现开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），通过自己设置参数（.properties或.yml的配置文件），即可快速使用。\n   - 自动地配置Spring和其他有需要的第三方依赖。\n   - 提供了一些大型项目中常见的非功能性特效，如内嵌服务器、安全、指标、健康检测、外部化配置等。\n   - 绝对没有代码生成，也无需XML配置。\n\n## 2.SpringBoot入门\n\n1. 在pom.xml中添加基本依赖\n\n   ```xml\n   <!-- 副工程依赖 -->\n   <parent>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-parent</artifactId>\n           <version>2.1.5.RELEASE</version>\n   </parent>\n   \n   <dependencies>\n   \t\t<!-- SpringBoot的依赖 -->\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-web</artifactId>\n           </dependency>\n           <!-- JSON依赖-->\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-json</artifactId>\n           </dependency>\n           <!-- Tomcat依赖-->\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-tomcat</artifactId>\n           </dependency>\n           <!-- Hibernate Validator依赖-->\n           <dependency>\n               <groupId>org.hibernate.validator</groupId>\n               <artifactId>hibernate-validator</artifactId>\n           </dependency>\n           <!-- Spring Web依赖-->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-web</artifactId>\n               <version>5.1.7.RELEASE</version>\n           </dependency>\n           <!-- Spring Web MVC依赖-->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-webmvc</artifactId>\n               <version>5.1.7.RELEASE</version>\n           </dependency>\n   </dependencies>\n   ```\n\n   \n\n2. 通过注解@Component&@ComponentScan扫描装配 Bean\n\n   User.java:\n\n   ```java\n   package com.lin.demo;\n   \n   \n   import org.springframework.beans.factory.annotation.Value;\n   import org.springframework.stereotype.Component;\n   \n   //若不配置名称，默认为类开头小写\n   @Component(\"user\")\n   public class User {\n       @Value(\"1\")\n       private int id;\n       @Value(\"user_name_1\")\n       private String userName;\n       @Value(\"note1\")\n       private String note;\n       \n       /**  setter and getter  **/\n   }\n   ```\n\n   为了让Spring IoC 容器装配这个类，需要改造类AppConfig\n\n   AppConfig.java\n\n   ```java\n   package com.lin.demo;\n   \n   \n   import org.springframework.context.annotation.ComponentScan;\n   import org.springframework.context.annotation.Configuration;\n   \n   @Configuration\n   @ComponentScan\n   public class AppConfig {\n   }\n   ```\n\n3. 测试扫描\n\n   ```java\n   ApplicationContext ctx\n   \t= new AnnotationConfigApplicationContext(AppConfig.class);\n   User user = ctx.getBean(User.class);\n   ```\n\n## Java配置\n\n常用注解：\n\n* @Configuration：声明一个类作为配置类，代替xml文件\n* @Bean：声明在方法上，将方法的返回值加入Bean容器，代替<bean>标签\n* @Value：属性注入\n* @propertySource：指定外部属性文件","tags":["SpringBoot"]}]